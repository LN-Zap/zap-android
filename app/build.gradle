apply plugin: 'com.android.application'

// Needed for gRPC
apply plugin: 'com.google.protobuf'

import com.android.build.OutputFile

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "zapsolutions.zap"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 16
        versionName "0.2.10-alpha"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "zap-android-" + versionName + "(" + versionCode + ")")
    }
    buildTypes {
        debug {
            // with the following line we can install release and debug version simultaneously
            applicationIdSuffix ".debug"
            resValue "string", "app_name", "Zap Debug"
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            resValue "string", "app_name", "Zap"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable 'MissingTranslation'
    }

    // when using lambda expression we need java version 1.8 or higher
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    splits {

        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable true

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "armeabi-v7a", "arm64-v8a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }

    packagingOptions {
        exclude "lib/armeabi/**"
        exclude "lib/mips/**"
        exclude "lib/mips64/**"
    }
}


//  Needed for gRPC
sourceSets {
    main.java.srcDirs += "${protobuf.generatedFilesBaseDir}/main/javalite"
}

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2]

// For each APK output variant, override versionCode with a combination of
// ext.abiCodes * 1000 + variant.versionCode. In this example, variant.versionCode
// is equal to defaultConfig.versionCode.
android.applicationVariants.all { variant ->

    // Assigns a different version code for each output APK
    // other than the universal APK.
    variant.outputs.each { output ->

        // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
        def baseAbiVersionCode =
                // Determines the ABI for this variant and returns the mapped value.
                project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

        // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
        // the following code does not override the version code for universal APKs.
        // However, because we want universal APKs to have the lowest version code,
        // this outcome is desirable.
        if (baseAbiVersionCode != null) {

            // Assigns the new version code to versionCodeOverride, which changes the version code
            // for only the output APK, not for the variant itself. Skipping this step simply
            // causes Gradle to use the value of variant.versionCode for the APK.
            output.versionCodeOverride =
                    baseAbiVersionCode * 1000 + variant.versionCode
        }
    }
}

//  Needed for gRPC
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.6.1"
    }
    plugins {
        javalite { artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0" }
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.25.0'
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
                grpc {
                    // This will generate the ServiceGrpc
                    // Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // QR-Code scanner: ToDo: check if this is secure
    implementation 'me.dm7.barcodescanner:zbar:1.9.8'

    // QR-Code generator: ToDo: check if this is secure
    implementation 'com.github.kenglxn.QRGen:android:2.5.0'

    // Library to restart app
    implementation 'com.jakewharton:process-phoenix:2.0.0'

    // HTTP library to perform API interaction
    implementation 'com.android.volley:volley:1.1.1'

    // Bitcoin implementation   // conflicts with current protobuf implementation.
    // implementation 'org.bitcoinj:bitcoinj-core:0.14.7'

    // Library to detect when app goes to background or foreground
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0-alpha01'

    // gRPC implementation to communicate with lnd
    implementation 'io.grpc:grpc-okhttp:1.25.0'
    implementation 'io.grpc:grpc-protobuf-lite:1.25.0'
    implementation 'io.grpc:grpc-stub:1.25.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    compileOnly 'com.google.api.grpc:googleapis-common-protos:0.0.3'

    // Used for base encoding and URI escaping
    implementation 'com.google.guava:guava:28.0-android'

    implementation "io.reactivex.rxjava3:rxjava:3.0.0-RC4"
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0-SNAPSHOT'

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0-alpha07'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.preference:preference:1.1.0'
    implementation 'androidx.biometric:biometric:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
